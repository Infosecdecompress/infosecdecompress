{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/patches_why_a_wifi_ssid_can_break_iphone_wifi_function/","result":{"data":{"markdownRemark":{"id":"c7848501-b22c-5079-899f-093f5daad2df","html":"<p>今年六月中資安研究員 <a href=\"https://twitter.com/vm_call\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Carl Schou</a>發現他的 iPhone 只要連上名為 <em>%p%s%s%s%s%n</em> 的 Wi-Fi，iPhone Wi-Fi 功能就會被強制關閉，如果要重新開啟 Wi-Fi，就只能重置手機網路設定。</p>\n<p><img src=\"/media/ioswifibug_01.png\" alt=\"\"></p>\n<p><a href=\"https://twitter.com/vm_call/status/1405937492642123782\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://twitter.com/vm_call/status/1405937492642123782</a></p>\n<p>Carl 接著在這個月初發現，如果 iOS 手機連上名稱為 <em>%secretclub%power</em> 的 Wi-Fi 的話，手機的 Wi-Fi 就會完全不能用，而且這次的情況更糟，重置手機的網路設定也不一定能修復手機的 Wi-Fi 功能。</p>\n<p><img src=\"/media/ioswifibug_02.png\" alt=\"\"></p>\n<p><a href=\"https://twitter.com/vm_call/status/1411630091038203909\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://twitter.com/vm_call/status/1411630091038203909</a></p>\n<p>那麼為什麼把 iOS 裝置連接到一些有奇怪 Wi-Fi 名稱的網路會影響手機的 Wi-Fi 連線功能呢？這是因為 iOS 系統上的字串格式化漏洞（Format String Bug)</p>\n<h2 id=\"什麼是字串格式化漏洞-format-string-bug-\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF%E5%AD%97%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%BC%8F%E6%B4%9E-format-string-bug-\" aria-label=\"什麼是字串格式化漏洞 format string bug  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是字串格式化漏洞 Format String Bug ？</h2>\n<p>要理解什麼是字串格式化漏洞之前，我們需要先稍微了解一下在程式語言中的字串跟變數是怎麼被處理的。</p>\n<p>以Ｃ語言為例的話，下面這段程式碼的作用是將 “Jeff“ 這個字串保存在 name 這個變數裡，再將變數 <em>name</em> 透過 <em>printf</em> 函式顯示出來。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  string name<span class=\"token operator\">=</span><span class=\"token string\">\"Jeff\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi, I am %s\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>大家可以注意到在使用 <em>printf</em> 函式在輸出的時候，我們使用了 <em>%s</em> 來代表要輸出的變數 name。</p>\n<p><em>%s</em> 是在Ｃ語言中用來代表字串的特殊字元，他會告訴像是 <em>printf</em> 這類型的函式說：我是一個變數不要直接把我印出來，要去後面找我對應的變數。</p>\n<p>類似的特殊字元還有代表浮點數的%f、代表十進位數字的%d、代表 pointer 的%p 等等的。</p>\n<h3 id=\"這樣造成什麼潛在漏洞\" style=\"position:relative;\"><a href=\"#%E9%80%99%E6%A8%A3%E9%80%A0%E6%88%90%E4%BB%80%E9%BA%BC%E6%BD%9B%E5%9C%A8%E6%BC%8F%E6%B4%9E\" aria-label=\"這樣造成什麼潛在漏洞 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>這樣造成什麼潛在漏洞？</h3>\n<p>如果今天，我們讓使用者可以輸入內容來與程式進行互動的話，就有可能會觸發字串格式化漏洞。</p>\n<p>下面這段程式碼的功用是讓使用者在執行的同時附上自己的名字，接著程式會將使用者的名字輸出。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>正常的使用者執行的話就會出現下面的結果，我輸入 Jeff 到程式裡，他就會將 Jeff 顯示出來。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">C:<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>example<span class=\"token operator\">></span>program.exe Jeff\nJeff</code></pre></div>\n<p>但是如果今天遇到來搗亂的使用者，他不乖乖的輸入名字，而是輸入以下這種內容的話就會出現問題。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">C:<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>example<span class=\"token operator\">></span>program.exe ％s\n0xffffdddd</code></pre></div>\n<p>大家可以發現原本應該是回傳 <em>%s</em> 的程式，現在顯示的是一串像是亂碼的東西 <em>0xffffdddd</em>，他其實是一段記憶體位置。之所以會回傳一段記憶體位置是因為當我們輸入 <em>%s</em> 到這個程式以後，在 <em>printf</em> 這個函式中他把 <em>%s</em> 認定為是一個變數了，因此 <em>printf</em> 會試著去尋找對應的變數所包含的資料，但是因為我們根本沒有設定一個變數給他，因此他就會回傳對應的記憶體位置給我們。</p>\n<p>如果我們沒有針對字串格式化漏洞進行任何的防護的話，攻擊者可以透過輸入下面這種內容來進行攻擊</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">C:<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>example<span class=\"token operator\">></span>program.exe ％s％s％s％s％s％s％s％s％s％s％s％s％s％s％s</code></pre></div>\n<p>如此一來，程式就會回傳一連串的記憶體資訊，攻擊者會可以透過這種方式來讀取到一些像是機密資訊等等的攻擊者原本不該有權限讀取的內容，進階一點的話攻擊者還有可能搭配溢位攻擊（Overflow Attack）或是其他的攻擊手法來修改程式的內容，讓攻擊者取得這個程式的控制權。</p>\n<h3 id=\"等等可不可以白話一點\" style=\"position:relative;\"><a href=\"#%E7%AD%89%E7%AD%89%E5%8F%AF%E4%B8%8D%E5%8F%AF%E4%BB%A5%E7%99%BD%E8%A9%B1%E4%B8%80%E9%BB%9E\" aria-label=\"等等可不可以白話一點 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>等等…可不可以白話一點？</h3>\n<p>以現實生活中的事物來做舉例的話，假設家Ｘ福有個只有員工才知道的通關密語，只要在結帳的時候說出這個通關密語就可以享有員工優惠。</p>\n<p>某天我在結帳的時候正在跟身旁的朋友聊天，過程中不小心提到了這個通關密語，結帳的員工在聽到了以後就以為我也是家Ｘ福的員工，因此主動幫我使用員工優惠打了折。</p>\n<p>我在注意到這件事以後，開始試著每次去家Ｘ福消費的時候都說出這個通關密語，並且發現每次都會有員工優惠，因此我就理解到這個通關密語是一個只有家Ｘ福員工才知道的秘密。貪心的我並不滿足，想要透過這個通關密語獲得更多的好處，因此這天我就來到家Ｘ福的員工休息室，佯裝成是忘記帶識別證的員工請別人幫我開門，這時我就說出了通關密語想要證明自己是家Ｘ福員工，休息室內的員工因為覺得這個通關密語只有自己人會知道，因此在沒有經過更近一步的驗證之下就相信了我是家Ｘ福讓我進入員工休息室。混入了員工休息室後的我就開始各種的搜集家Ｘ福的機密資料，想辦法從中獲利。</p>\n<p>字串格式化漏洞也是類似的概念，當我們的程式沒有好的防護機制的時候，攻擊者就會透過 <em>%s</em>、<em>%p</em> 等等的字串的佯裝，讓我們的程式把他們誤以為是合法的變數而回傳對應的資料，透過這樣的方式攻擊者就有辦法從我們的程式中取得機密資訊和控制權。</p>\n<h2 id=\"這跟這次的-wi-fi-問題有什麼關聯\" style=\"position:relative;\"><a href=\"#%E9%80%99%E8%B7%9F%E9%80%99%E6%AC%A1%E7%9A%84-wi-fi-%E5%95%8F%E9%A1%8C%E6%9C%89%E4%BB%80%E9%BA%BC%E9%97%9C%E8%81%AF\" aria-label=\"這跟這次的 wi fi 問題有什麼關聯 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>這跟這次的 Wi-Fi 問題有什麼關聯？</h2>\n<p>眼尖的讀者應該會發現，在資安研究員 Carl 發現的兩個有問題的 Wi-Fi 名稱中都包含了 <em>%s</em> 以及 <em>%p</em> ，再加上 iOS 作業系統的底層是由Ｃ語言所寫的，因此大家推斷 iOS 的 Wi-Fi 功能中存在著字串格式化漏洞。當我們連上了一個名稱中有 %s 或是 %p 的 Wi-Fi 時，很高機率是觸發了漏洞導致 iOS 手機無法正確地處理這些 Wi-Fi 名稱。</p>\n<p>目前從網友提供的資訊來看，此次字串格式化漏洞的影響只限於影響 iOS 裝置的 Wi-Fi 功能導致無法使用 Wi-Fi 連線，沒有造成其他更危險的影響。但我們並不知道攻擊者會不會在得知這個漏洞，經過更多的研究後找到危險性更高的攻擊手法，因此大家還是要多多留意。</p>\n<h2 id=\"應對方式\" style=\"position:relative;\"><a href=\"#%E6%87%89%E5%B0%8D%E6%96%B9%E5%BC%8F\" aria-label=\"應對方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>應對方式</h2>\n<ol>\n<li>關閉 iOS 裝置的 <strong>自動加入熱點</strong> 功能：關閉這個功能可以避免手機自動連上別人的熱點，避免手機自動連上惡意 Wi-Fi。</li>\n<li>不要使用公開、未知的 Wi-Fi：不要隨意的連接和使用公開、安全性未知的 Wi-Fi，我們很難知道這個 Wi-Fi 是由誰提供的、對方是否有惡意。即便 Wi-Fi 名稱看似正常，也有可能是攻擊者偽裝的，因此建議大家不要使用公開、安全性未知的 Wi-Fi。</li>\n<li>更新手機作業系統：Apple 在 7/19 釋出 iOS14.7 修補了這個漏洞。除了這次的更新以外，建議大家養成即時更新的好習慣，這樣未來遇到不同的漏洞時也能在第一時間修補。</li>\n</ol>\n<h2 id=\"相關連結延伸閱讀\" style=\"position:relative;\"><a href=\"#%E7%9B%B8%E9%97%9C%E9%80%A3%E7%B5%90%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\" aria-label=\"相關連結延伸閱讀 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>相關連結／延伸閱讀</h2>\n<p><a href=\"https://blog.chichou.me/2021/06/20/quick-analysis-wifid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codecolorist - Quick Analysis for the SSID Format String Bug</a></p>\n<p><a href=\"https://www.inside.com.tw/article/24095-researcher-finds-network-names-percent-may-disable-wifi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inside - 資安專家證實蘋果 WiFi 出現嚴重漏洞，此符號將影響 iPhone、iOS 網路連線</a></p>\n<p><a href=\"https://www.bleepingcomputer.com/news/security/iphone-bug-breaks-wifi-when-you-join-hotspot-with-unusual-name/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bleeping Computer - iPhone bug breaks WiFi when you join hotspot with unusual name</a></p>\n<hr>\n<p><em>本文同步刊載於<a href=\"https://www.inside.com.tw/article/24173-iphone-bug-breaks-wifi-how-to-protect-yourself\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INSIDE 關鍵評論網</a></em></p>","fields":{"slug":"/posts/2021-07-20-為什麼奇怪wi-fi名稱會影響手機的wi-fi功能？//posts/patches_why_a_wifi_ssid_can_break_iphone_wifi_function","tagSlugs":["/tag/ios/","/tag/iphone/","/tag/apple/"]},"frontmatter":{"date":"2021-07-20T03:30:28.914Z description: 六月中資安研究員發現iPhone只要連上名為 *%p%s%s%s%s%n* 的Wi-Fi，iPhone Wi-Fi功能就會被強制關閉，為什麼把iOS裝置連接到一些有奇怪Wi-Fi名稱的網路會影響手機的Wi-Fi連線功能呢？","description":null,"tags":["iOS","iPhone","Apple"],"title":"為什麼奇怪Wi-Fi名稱會影響手機的Wi-Fi功能？","socialImage":"/media/icon.jpeg"}}},"pageContext":{"slug":"/posts/2021-07-20-為什麼奇怪wi-fi名稱會影響手機的wi-fi功能？//posts/patches_why_a_wifi_ssid_can_break_iphone_wifi_function"}},"staticQueryHashes":["2246977889","2727970573","911332639"],"slicesMap":{}}